{"version":3,"file":"ReorientationPlugin-BUllGpqj.js","sources":["../../../src/three/plugins/ReorientationPlugin.js"],"sourcesContent":["import { Sphere } from 'three';\nimport { OBJECT_FRAME } from '../../three/renderer/math/Ellipsoid.js';\n\nconst sphere = /* @__PURE__ */ new Sphere();\nexport class ReorientationPlugin {\n\n\tconstructor( options ) {\n\n\t\toptions = {\n\t\t\tup: '+z',\n\t\t\trecenter: true,\n\n\t\t\tlat: null,\n\t\t\tlon: null,\n\t\t\theight: 0,\n\n\t\t\tazimuth: 0,\n\t\t\televation: 0,\n\t\t\troll: 0,\n\n\t\t\t...options,\n\t\t};\n\n\t\tthis.tiles = null;\n\n\t\tthis.up = options.up.toLowerCase().replace( /\\s+/, '' );\n\t\tthis.lat = options.lat;\n\t\tthis.lon = options.lon;\n\t\tthis.height = options.height;\n\t\tthis.azimuth = options.azimuth;\n\t\tthis.elevation = options.elevation;\n\t\tthis.roll = options.roll;\n\t\tthis.recenter = options.recenter;\n\t\tthis._callback = null;\n\n\t}\n\n\tinit( tiles ) {\n\n\t\tthis.tiles = tiles;\n\n\t\tthis._callback = () => {\n\n\t\t\tconst { up, lat, lon, height, azimuth, elevation, roll, recenter } = this;\n\n\t\t\tif ( lat !== null && lon !== null ) {\n\n\t\t\t\t// if the latitude and longitude are provided then remove the position offset\n\t\t\t\tthis.transformLatLonHeightToOrigin( lat, lon, height, azimuth, elevation, roll );\n\n\t\t\t} else {\n\n\t\t\t\tconst { ellipsoid } = tiles;\n\t\t\t\tconst minRadii = Math.min( ...ellipsoid.radius );\n\t\t\t\ttiles.getBoundingSphere( sphere );\n\t\t\t\tif ( sphere.center.length() > minRadii * 0.5 ) {\n\n\t\t\t\t\t// otherwise see if this is possibly a tile set on the surface of the globe based on the positioning\n\t\t\t\t\tconst cart = {};\n\t\t\t\t\tellipsoid.getPositionToCartographic( sphere.center, cart );\n\t\t\t\t\tthis.transformLatLonHeightToOrigin( cart.lat, cart.lon, cart.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// lastly fall back to orienting the up direction to +Y\n\t\t\t\t\tconst group = tiles.group;\n\t\t\t\t\tgroup.rotation.set( 0, 0, 0 );\n\t\t\t\t\tswitch ( up ) {\n\n\t\t\t\t\t\tcase 'x': case '+x':\n\t\t\t\t\t\t\tgroup.rotation.z = Math.PI / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '-x':\n\t\t\t\t\t\t\tgroup.rotation.z = - Math.PI / 2;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'y': case '+y':\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '-y':\n\t\t\t\t\t\t\tgroup.rotation.z = Math.PI;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'z': case '+z':\n\t\t\t\t\t\t\tgroup.rotation.x = - Math.PI / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '-z':\n\t\t\t\t\t\t\tgroup.rotation.x = Math.PI / 2;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttiles.group.position\n\t\t\t\t\t\t.copy( sphere.center )\n\t\t\t\t\t\t.applyEuler( group.rotation )\n\t\t\t\t\t\t.multiplyScalar( - 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! recenter ) {\n\n\t\t\t\ttiles.group.position.setScalar( 0 );\n\n\t\t\t}\n\n\t\t\ttiles.removeEventListener( 'load-tile-set', this._callback );\n\n\t\t};\n\n\t\ttiles.addEventListener( 'load-tile-set', this._callback );\n\n\t\tif ( tiles.root ) {\n\n\t\t\tthis._callback();\n\n\t\t}\n\n\t}\n\n\ttransformLatLonHeightToOrigin( lat, lon, height = 0, azimuth = 0, elevation = 0, roll = 0 ) {\n\n\t\tconst { group, ellipsoid } = this.tiles;\n\n\t\t// get ENU orientation (Z facing north and X facing west) and position\n\t\tellipsoid.getObjectFrame( lat, lon, height, azimuth, elevation, roll, group.matrix, OBJECT_FRAME );\n\n\t\t// adjust the group matrix\n\t\tgroup.matrix.invert().decompose( group.position, group.quaternion, group.scale );\n\t\tgroup.updateMatrixWorld();\n\n\t}\n\n\tdispose() {\n\n\t\tconst { group } = this.tiles;\n\t\tgroup.position.setScalar( 0 );\n\t\tgroup.quaternion.identity();\n\t\tgroup.scale.set( 1, 1, 1 );\n\n\t\tthis.tiles.removeEventListener( 'load-tile-set', this._callback );\n\n\t}\n\n}\n"],"names":["sphere","Sphere","ReorientationPlugin","options","tiles","up","lat","lon","height","azimuth","elevation","roll","recenter","ellipsoid","minRadii","cart","group","OBJECT_FRAME"],"mappings":"2FAGA,MAAMA,EAAyB,IAAIC,EAC5B,MAAMC,CAAoB,CAEhC,YAAaC,EAAU,CAEtBA,EAAU,CACT,GAAI,KACJ,SAAU,GAEV,IAAK,KACL,IAAK,KACL,OAAQ,EAER,QAAS,EACT,UAAW,EACX,KAAM,EAEN,GAAGA,CACH,EAED,KAAK,MAAQ,KAEb,KAAK,GAAKA,EAAQ,GAAG,YAAW,EAAG,QAAS,MAAO,EAAI,EACvD,KAAK,IAAMA,EAAQ,IACnB,KAAK,IAAMA,EAAQ,IACnB,KAAK,OAASA,EAAQ,OACtB,KAAK,QAAUA,EAAQ,QACvB,KAAK,UAAYA,EAAQ,UACzB,KAAK,KAAOA,EAAQ,KACpB,KAAK,SAAWA,EAAQ,SACxB,KAAK,UAAY,IAEnB,CAEC,KAAMC,EAAQ,CAEb,KAAK,MAAQA,EAEb,KAAK,UAAY,IAAM,CAEtB,KAAM,CAAE,GAAAC,EAAI,IAAAC,EAAK,IAAAC,EAAK,OAAAC,EAAQ,QAAAC,EAAS,UAAAC,EAAW,KAAAC,EAAM,SAAAC,CAAQ,EAAK,KAErE,GAAKN,IAAQ,MAAQC,IAAQ,KAG5B,KAAK,8BAA+BD,EAAKC,EAAKC,EAAQC,EAASC,EAAWC,CAAM,MAE1E,CAEN,KAAM,CAAE,UAAAE,CAAS,EAAKT,EAChBU,EAAW,KAAK,IAAK,GAAGD,EAAU,MAAQ,EAEhD,GADAT,EAAM,kBAAmBJ,CAAQ,EAC5BA,EAAO,OAAO,OAAM,EAAKc,EAAW,GAAM,CAG9C,MAAMC,EAAO,CAAE,EACfF,EAAU,0BAA2Bb,EAAO,OAAQe,CAAM,EAC1D,KAAK,8BAA+BA,EAAK,IAAKA,EAAK,IAAKA,EAAK,MAAQ,CAE1E,KAAW,CAGN,MAAMC,EAAQZ,EAAM,MAEpB,OADAY,EAAM,SAAS,IAAK,EAAG,EAAG,CAAG,EACpBX,EAAE,CAEV,IAAK,IAAK,IAAK,KACdW,EAAM,SAAS,EAAI,KAAK,GAAK,EAC7B,MACD,IAAK,KACJA,EAAM,SAAS,EAAI,CAAE,KAAK,GAAK,EAC/B,MAED,IAAK,IAAK,IAAK,KACd,MACD,IAAK,KACJA,EAAM,SAAS,EAAI,KAAK,GACxB,MAED,IAAK,IAAK,IAAK,KACdA,EAAM,SAAS,EAAI,CAAE,KAAK,GAAK,EAC/B,MACD,IAAK,KACJA,EAAM,SAAS,EAAI,KAAK,GAAK,EAC7B,KAEP,CAEKZ,EAAM,MAAM,SACV,KAAMJ,EAAO,MAAM,EACnB,WAAYgB,EAAM,QAAQ,EAC1B,eAAgB,EAAK,CAE5B,CAEA,CAEUJ,GAENR,EAAM,MAAM,SAAS,UAAW,CAAG,EAIpCA,EAAM,oBAAqB,gBAAiB,KAAK,SAAW,CAE5D,EAEDA,EAAM,iBAAkB,gBAAiB,KAAK,SAAW,EAEpDA,EAAM,MAEV,KAAK,UAAW,CAInB,CAEC,8BAA+BE,EAAKC,EAAKC,EAAS,EAAGC,EAAU,EAAGC,EAAY,EAAGC,EAAO,EAAI,CAE3F,KAAM,CAAE,MAAAK,EAAO,UAAAH,CAAW,EAAG,KAAK,MAGlCA,EAAU,eAAgBP,EAAKC,EAAKC,EAAQC,EAASC,EAAWC,EAAMK,EAAM,OAAQC,CAAc,EAGlGD,EAAM,OAAO,OAAQ,EAAC,UAAWA,EAAM,SAAUA,EAAM,WAAYA,EAAM,KAAO,EAChFA,EAAM,kBAAmB,CAE3B,CAEC,SAAU,CAET,KAAM,CAAE,MAAAA,GAAU,KAAK,MACvBA,EAAM,SAAS,UAAW,CAAG,EAC7BA,EAAM,WAAW,SAAU,EAC3BA,EAAM,MAAM,IAAK,EAAG,EAAG,CAAG,EAE1B,KAAK,MAAM,oBAAqB,gBAAiB,KAAK,SAAW,CAEnE,CAEA"}