{"version":3,"file":"EllipsoidRegion-BEIhCuST.js","sources":["../../../src/three/renderer/math/EllipsoidRegion.js"],"sourcesContent":["import { MathUtils, Matrix4 } from 'three';\nimport { Vector3 } from 'three';\nimport { Ellipsoid } from './Ellipsoid.js';\n\nconst PI = Math.PI;\nconst HALF_PI = PI / 2;\n\nconst _orthoX = new Vector3();\nconst _orthoY = new Vector3();\nconst _orthoZ = new Vector3();\nconst _invMatrix = new Matrix4();\n\nlet _poolIndex = 0;\nconst _pointsPool = [];\nfunction getVector( usePool = false ) {\n\n\tif ( ! usePool ) {\n\n\t\treturn new Vector3();\n\n\t}\n\n\tif ( ! _pointsPool[ _poolIndex ] ) {\n\n\t\t_pointsPool[ _poolIndex ] = new Vector3();\n\n\t}\n\n\t_poolIndex ++;\n\treturn _pointsPool[ _poolIndex - 1 ];\n\n}\n\nfunction resetPool() {\n\n\t_poolIndex = 0;\n\n}\n\nexport class EllipsoidRegion extends Ellipsoid {\n\n\tconstructor(\n\t\tx, y, z,\n\t\tlatStart = - HALF_PI, latEnd = HALF_PI,\n\t\tlonStart = 0, lonEnd = 2 * PI,\n\t\theightStart = 0, heightEnd = 0\n\t) {\n\n\t\tsuper( x, y, z );\n\t\tthis.latStart = latStart;\n\t\tthis.latEnd = latEnd;\n\t\tthis.lonStart = lonStart;\n\t\tthis.lonEnd = lonEnd;\n\t\tthis.heightStart = heightStart;\n\t\tthis.heightEnd = heightEnd;\n\n\t}\n\n\t_getPoints( usePool = false ) {\n\n\t\tconst {\n\t\t\tlatStart, latEnd,\n\t\t\tlonStart, lonEnd,\n\t\t\theightStart, heightEnd,\n\t\t} = this;\n\n\t\tconst midLat = MathUtils.mapLinear( 0.5, 0, 1, latStart, latEnd );\n\t\tconst midLon = MathUtils.mapLinear( 0.5, 0, 1, lonStart, lonEnd );\n\n\t\tconst lonOffset = Math.floor( lonStart / HALF_PI ) * HALF_PI;\n\t\tconst latlon = [\n\t\t\t[ - PI / 2, 0 ],\n\t\t\t[ PI / 2, 0 ],\n\t\t\t[ 0, lonOffset ],\n\t\t\t[ 0, lonOffset + PI / 2 ],\n\t\t\t[ 0, lonOffset + PI ],\n\t\t\t[ 0, lonOffset + 3 * PI / 2 ],\n\n\t\t\t[ latStart, lonEnd ],\n\t\t\t[ latEnd, lonEnd ],\n\t\t\t[ latStart, lonStart ],\n\t\t\t[ latEnd, lonStart ],\n\n\t\t\t[ 0, lonStart ],\n\t\t\t[ 0, lonEnd ],\n\n\t\t\t[ midLat, midLon ],\n\t\t\t[ latStart, midLon ],\n\t\t\t[ latEnd, midLon ],\n\t\t\t[ midLat, lonStart ],\n\t\t\t[ midLat, lonEnd ],\n\n\t\t];\n\n\t\tconst target = [];\n\t\tconst total = latlon.length;\n\n\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\tconst height = MathUtils.mapLinear( z, 0, 1, heightStart, heightEnd );\n\t\t\tfor ( let i = 0, l = total; i < l; i ++ ) {\n\n\t\t\t\tconst [ lat, lon ] = latlon[ i ];\n\t\t\t\tif ( lat >= latStart && lat <= latEnd && lon >= lonStart && lon <= lonEnd ) {\n\n\t\t\t\t\tconst v = getVector( usePool );\n\t\t\t\t\ttarget.push( v );\n\t\t\t\t\tthis.getCartographicToPosition( lat, lon, height, v );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( box, matrix ) {\n\n\t\tresetPool();\n\n\t\tconst {\n\t\t\tlatStart, latEnd,\n\t\t\tlonStart, lonEnd,\n\t\t} = this;\n\n\t\tconst latRange = latEnd - latStart;\n\t\tif ( latRange < PI / 2 ) {\n\n\t\t\t// get the midway point for the region\n\t\t\tconst midLat = MathUtils.mapLinear( 0.5, 0, 1, latStart, latEnd );\n\t\t\tconst midLon = MathUtils.mapLinear( 0.5, 0, 1, lonStart, lonEnd );\n\n\t\t\t// get the frame matrix for the box - works well for smaller regions\n\t\t\tthis.getCartographicToNormal( midLat, midLon, _orthoZ );\n\t\t\t_orthoY.set( 0, 0, 1 );\n\t\t\t_orthoX.crossVectors( _orthoY, _orthoZ );\n\t\t\t_orthoY.crossVectors( _orthoX, _orthoZ );\n\t\t\tmatrix.makeBasis( _orthoX, _orthoY, _orthoZ );\n\n\t\t} else {\n\n\t\t\t_orthoX.set( 1, 0, 0 );\n\t\t\t_orthoY.set( 0, 1, 0 );\n\t\t\t_orthoZ.set( 0, 0, 1 );\n\t\t\tmatrix.makeBasis( _orthoX, _orthoY, _orthoZ );\n\n\t\t}\n\n\t\t// transform the points into the local frame\n\t\t_invMatrix.copy( matrix ).invert();\n\n\t\tconst points = this._getPoints( true );\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tpoints[ i ].applyMatrix4( _invMatrix );\n\n\t\t}\n\n\t\t// init the box\n\t\tbox.makeEmpty();\n\t\tbox.setFromPoints( points );\n\n\t}\n\n\tgetBoundingSphere( sphere, center ) {\n\n\t\tresetPool();\n\n\t\tconst points = this._getPoints( true );\n\t\tsphere.makeEmpty();\n\t\tsphere.setFromPoints( points, center );\n\n\t}\n\n}\n"],"names":["PI","HALF_PI","_orthoX","Vector3","_orthoY","_orthoZ","_invMatrix","Matrix4","_poolIndex","_pointsPool","getVector","usePool","resetPool","EllipsoidRegion","Ellipsoid","x","y","z","latStart","latEnd","lonStart","lonEnd","heightStart","heightEnd","midLat","MathUtils","midLon","lonOffset","latlon","target","total","height","i","l","lat","lon","v","box","matrix","points","sphere","center"],"mappings":"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"}