{"version":3,"file":"UpdateOnChangePlugin-Dcw2gdwr.js","sources":["../../../src/three/plugins/UpdateOnChangePlugin.js"],"sourcesContent":["import { Matrix4 } from 'three';\n\nconst _matrix = new Matrix4();\nexport class UpdateOnChangePlugin {\n\n\tconstructor() {\n\n\t\tthis.name = 'UPDATE_ON_CHANGE_PLUGIN';\n\t\tthis.tiles = null;\n\t\tthis.needsUpdate = false;\n\t\tthis.cameraMatrices = new Map();\n\n\t}\n\n\tinit( tiles ) {\n\n\t\tthis.tiles = tiles;\n\n\t\t// register callbacks to add cameras and force a new update\n\t\tthis._needsUpdateCallback = () => {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t};\n\t\tthis._onCameraAdd = ( { camera } ) => {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cameraMatrices.set( camera, new Matrix4() );\n\n\t\t};\n\t\tthis._onCameraDelete = ( { camera } ) => {\n\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cameraMatrices.delete( camera );\n\n\t\t};\n\n\t\ttiles.addEventListener( 'needs-update', this._needsUpdateCallback );\n\t\ttiles.addEventListener( 'add-camera', this._onCameraAdd );\n\t\ttiles.addEventListener( 'delete-camera', this._onCameraDelete );\n\t\ttiles.addEventListener( 'camera-resolution-change', this._needsUpdateCallback );\n\n\t\t// register any already-present cameras\n\t\ttiles.cameras.forEach( camera => {\n\n\t\t\tthis._onCameraAdd( { camera } );\n\n\t\t} );\n\n\t}\n\n\tdoTilesNeedUpdate() {\n\n\t\tconst tiles = this.tiles;\n\t\tlet didCamerasChange = false;\n\t\tthis.cameraMatrices.forEach( ( matrix, camera ) => {\n\n\t\t\t// check if the camera position or frustum changed by comparing the MVP\n\t\t\t// matrix between frames\n\t\t\t_matrix\n\t\t\t\t.copy( tiles.group.matrixWorld )\n\t\t\t\t.premultiply( camera.matrixWorldInverse )\n\t\t\t\t.premultiply( camera.projectionMatrixInverse );\n\n\t\t\tdidCamerasChange = didCamerasChange || ! _matrix.equals( matrix );\n\t\t\tmatrix.copy( _matrix );\n\n\t\t} );\n\n\t\tconst needsUpdate = this.needsUpdate;\n\t\tthis.needsUpdate = false;\n\n\t\treturn needsUpdate || didCamerasChange;\n\n\t}\n\n\tpreprocessNode() {\n\n\t\t// trigger a new update when nodes are processed because hte process happens asynchronously\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tconst tiles = this.tiles;\n\t\ttiles.removeEventListener( 'camera-resolution-change', this._needsUpdateCallback );\n\t\ttiles.removeEventListener( 'needs-update', this._needsUpdateCallback );\n\t\ttiles.removeEventListener( 'add-camera', this._onCameraAdd );\n\t\ttiles.removeEventListener( 'delete-camera', this._onCameraDelete );\n\n\t}\n\n}\n"],"names":["_matrix","Matrix4","UpdateOnChangePlugin","tiles","camera","didCamerasChange","matrix","needsUpdate"],"mappings":"+CAEA,MAAMA,EAAU,IAAIC,EACb,MAAMC,CAAqB,CAEjC,aAAc,CAEb,KAAK,KAAO,0BACZ,KAAK,MAAQ,KACb,KAAK,YAAc,GACnB,KAAK,eAAiB,IAAI,GAE5B,CAEC,KAAMC,EAAQ,CAEb,KAAK,MAAQA,EAGb,KAAK,qBAAuB,IAAM,CAEjC,KAAK,YAAc,EAEnB,EACD,KAAK,aAAe,CAAE,CAAE,OAAAC,KAAc,CAErC,KAAK,YAAc,GACnB,KAAK,eAAe,IAAKA,EAAQ,IAAIH,CAAW,CAEhD,EACD,KAAK,gBAAkB,CAAE,CAAE,OAAAG,KAAc,CAExC,KAAK,YAAc,GACnB,KAAK,eAAe,OAAQA,CAAQ,CAEpC,EAEDD,EAAM,iBAAkB,eAAgB,KAAK,oBAAsB,EACnEA,EAAM,iBAAkB,aAAc,KAAK,YAAc,EACzDA,EAAM,iBAAkB,gBAAiB,KAAK,eAAiB,EAC/DA,EAAM,iBAAkB,2BAA4B,KAAK,oBAAsB,EAG/EA,EAAM,QAAQ,QAASC,GAAU,CAEhC,KAAK,aAAc,CAAE,OAAAA,EAAU,CAElC,CAAK,CAEL,CAEC,mBAAoB,CAEnB,MAAMD,EAAQ,KAAK,MACnB,IAAIE,EAAmB,GACvB,KAAK,eAAe,QAAS,CAAEC,EAAQF,IAAY,CAIlDJ,EACE,KAAMG,EAAM,MAAM,WAAW,EAC7B,YAAaC,EAAO,kBAAkB,EACtC,YAAaA,EAAO,uBAAyB,EAE/CC,EAAmBA,GAAoB,CAAEL,EAAQ,OAAQM,CAAQ,EACjEA,EAAO,KAAMN,CAAS,CAEzB,CAAK,EAEH,MAAMO,EAAc,KAAK,YACzB,YAAK,YAAc,GAEZA,GAAeF,CAExB,CAEC,gBAAiB,CAGhB,KAAK,YAAc,EAErB,CAEC,SAAU,CAET,MAAMF,EAAQ,KAAK,MACnBA,EAAM,oBAAqB,2BAA4B,KAAK,oBAAsB,EAClFA,EAAM,oBAAqB,eAAgB,KAAK,oBAAsB,EACtEA,EAAM,oBAAqB,aAAc,KAAK,YAAc,EAC5DA,EAAM,oBAAqB,gBAAiB,KAAK,eAAiB,CAEpE,CAEA"}