{"version":3,"file":"EllipsoidRegionHelper-4krpge1Q.js","sources":["../../../src/three/plugins/objects/SphereHelper.js","../../../src/three/plugins/objects/EllipsoidRegionHelper.js"],"sourcesContent":["import { LineSegments, BufferGeometry, Vector3, BufferAttribute, LineBasicMaterial } from 'three';\n\nconst _vector = new Vector3();\nconst axes = [ 'x', 'y', 'z' ];\nexport class SphereHelper extends LineSegments {\n\n\tconstructor( sphere, color = 0xffff00, angleSteps = 40 ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst positions = [];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis1 = axes[ i ];\n\t\t\tconst axis2 = axes[ ( i + 1 ) % 3 ];\n\t\t\t_vector.set( 0, 0, 0 );\n\n\t\t\tfor ( let a = 0; a < angleSteps; a ++ ) {\n\n\t\t\t\tlet angle;\n\t\t\t\tangle = 2 * Math.PI * a / ( angleSteps - 1 );\n\t\t\t\t_vector[ axis1 ] = Math.sin( angle );\n\t\t\t\t_vector[ axis2 ] = Math.cos( angle );\n\n\t\t\t\tpositions.push( _vector.x, _vector.y, _vector.z );\n\n\t\t\t\tangle = 2 * Math.PI * ( a + 1 ) / ( angleSteps - 1 );\n\t\t\t\t_vector[ axis1 ] = Math.sin( angle );\n\t\t\t\t_vector[ axis2 ] = Math.cos( angle );\n\n\t\t\t\tpositions.push( _vector.x, _vector.y, _vector.z );\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( new Float32Array( positions ), 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.sphere = sphere;\n\t\tthis.type = 'SphereHelper';\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst sphere = this.sphere;\n\t\tthis.position.copy( sphere.center );\n\t\tthis.scale.setScalar( sphere.radius );\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n","import { EllipsoidRegion } from '../../../three/renderer/math/EllipsoidRegion.js';\nimport { Mesh, Vector3, MathUtils, BoxGeometry, BufferGeometry, EdgesGeometry, LineSegments, BufferAttribute } from 'three';\n\nconst _norm = new Vector3();\nconst _norm2 = new Vector3();\nconst _pos = new Vector3();\nconst _vec1 = new Vector3();\nconst _vec2 = new Vector3();\n\n// Converts a geometry with a given set of groups rendering a smaller set of\n// geometry into a new one with only the relevant triangles.\nfunction toGroupGeometry( geometry ) {\n\n\t// non indexed makes this process easier\n\tgeometry = geometry.toNonIndexed();\n\n\t// prep the arrays\n\tconst { groups } = geometry;\n\tconst { position, normal } = geometry.attributes;\n\tconst newNorm = [];\n\tconst newPos = [];\n\n\t// add the normals and the positions\n\tfor ( const group of groups ) {\n\n\t\tconst { start, count } = group;\n\t\tfor ( let i = start, l = ( start + count ); i < l; i ++ ) {\n\n\t\t\t_vec1.fromBufferAttribute( position, i );\n\t\t\t_vec2.fromBufferAttribute( normal, i );\n\n\t\t\tnewPos.push( ..._vec1 );\n\t\t\tnewNorm.push( ..._vec2 );\n\n\t\t}\n\n\t}\n\n\t// set the new geometry\n\tconst newGeometry = new BufferGeometry();\n\tnewGeometry.setAttribute( 'position', new BufferAttribute( new Float32Array( newPos ), 3 ) );\n\tnewGeometry.setAttribute( 'normal', new BufferAttribute( new Float32Array( newNorm ), 3 ) );\n\n\treturn newGeometry;\n\n}\n\nfunction getRegionGeometry( ellipsoidRegion, { computeNormals = false } = {} ) {\n\n\t// retrieve the relevant fields\n\tconst {\n\t\tlatStart = - Math.PI / 2, latEnd = Math.PI / 2,\n\t\tlonStart = 0, lonEnd = 2 * Math.PI,\n\t\theightStart = 0, heightEnd = 0,\n\t} = ellipsoidRegion;\n\n\t// get the attributes\n\tconst geometry = new BoxGeometry( 1, 1, 1, 32, 32 );\n\tconst { normal, position } = geometry.attributes;\n\n\t// clone the position buffer so we can reference it for normal calculations later\n\tconst refPosition = position.clone();\n\n\t// perturb the position buffer into an ellipsoid region\n\tfor ( let i = 0, l = position.count; i < l; i ++ ) {\n\n\t\t_pos.fromBufferAttribute( position, i );\n\n\t\tconst lat = MathUtils.mapLinear( _pos.x, - 0.5, 0.5, latStart, latEnd );\n\t\tconst lon = MathUtils.mapLinear( _pos.y, - 0.5, 0.5, lonStart, lonEnd );\n\n\t\tlet height = heightStart;\n\t\tellipsoidRegion.getCartographicToNormal( lat, lon, _norm );\n\t\tif ( _pos.z < 0 ) {\n\n\t\t\theight = heightEnd;\n\n\t\t}\n\t\tellipsoidRegion.getCartographicToPosition( lat, lon, height, _pos );\n\t\tposition.setXYZ( i, ..._pos );\n\n\t}\n\n\tif ( computeNormals ) {\n\n\t\t// compute the vertex normals so we can get the edge normals\n\t\tgeometry.computeVertexNormals();\n\n\t}\n\n\t// compute the top and bottom cap normals\n\tfor ( let i = 0, l = refPosition.count; i < l; i ++ ) {\n\n\t\t_pos.fromBufferAttribute( refPosition, i );\n\n\t\tconst lat = MathUtils.mapLinear( _pos.x, - 0.5, 0.5, latStart, latEnd );\n\t\tconst lon = MathUtils.mapLinear( _pos.y, - 0.5, 0.5, lonStart, lonEnd );\n\n\t\t_norm.fromBufferAttribute( normal, i );\n\t\tellipsoidRegion.getCartographicToNormal( lat, lon, _norm2 );\n\n\t\t// exclude the sides so we get sharp corners\n\t\tif ( Math.abs( _norm.dot( _norm2 ) ) > 0.1 ) {\n\n\t\t\tif ( _pos.z > 0 ) {\n\n\t\t\t\t_norm2.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t\tnormal.setXYZ( i, ..._norm2 );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\nexport class EllipsoidRegionLineHelper extends LineSegments {\n\n\tconstructor( ellipsoidRegion = new EllipsoidRegion(), color = 0xffff00 ) {\n\n\t\tsuper();\n\t\tthis.ellipsoidRegion = ellipsoidRegion;\n\t\tthis.material.color.set( color );\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = getRegionGeometry( this.ellipsoidRegion );\n\t\tthis.geometry.dispose();\n\t\tthis.geometry = new EdgesGeometry( geometry, 80 );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nexport class EllipsoidRegionHelper extends Mesh {\n\n\tconstructor( ellipsoidRegion = new EllipsoidRegion(), color = 0xffff00 ) {\n\n\t\tsuper();\n\t\tthis.ellipsoidRegion = ellipsoidRegion;\n\t\tthis.material.color.set( color );\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\t// dispose of the existing geometry\n\t\tthis.geometry.dispose();\n\n\t\t// retrieve the relevant fields\n\t\tconst geometry = getRegionGeometry( this.ellipsoidRegion, { computeNormals: true } );\n\t\tconst { lonStart, lonEnd } = this;\n\n\t\t// exclude the side tris if the region wraps around\n\t\tif ( lonEnd - lonStart >= 2 * Math.PI ) {\n\n\t\t\tgeometry.groups.splice( 2, 2 );\n\t\t\tthis.geometry = toGroupGeometry( geometry );\n\n\t\t} else {\n\n\t\t\tthis.geometry = geometry;\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n"],"names":["_vector","Vector3","axes","SphereHelper","LineSegments","sphere","color","angleSteps","geometry","BufferGeometry","positions","i","axis1","axis2","a","angle","BufferAttribute","LineBasicMaterial","force","_norm","_norm2","_pos","_vec1","_vec2","toGroupGeometry","groups","position","normal","newNorm","newPos","group","start","count","l","newGeometry","getRegionGeometry","ellipsoidRegion","computeNormals","latStart","latEnd","lonStart","lonEnd","heightStart","heightEnd","BoxGeometry","refPosition","lat","MathUtils","lon","height","EllipsoidRegionLineHelper","EllipsoidRegion","EdgesGeometry","EllipsoidRegionHelper","Mesh"],"mappings":"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"}