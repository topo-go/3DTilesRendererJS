{"version":3,"file":"CameraViewTransition-CQmHl6JH.js","sources":["../../r3f/components/makeRotateAroundPoint.js","../../r3f/components/CameraViewTransition.jsx"],"sourcesContent":["import { Matrix4 } from 'three';\n\n// helper function for constructing a matrix for rotating around a point\nconst _matrix = new Matrix4();\nexport function makeRotateAroundPoint( point, quat, target ) {\n\n\ttarget.makeTranslation( - point.x, - point.y, - point.z );\n\n\t_matrix.makeRotationFromQuaternion( quat );\n\ttarget.premultiply( _matrix );\n\n\t_matrix.makeTranslation( point.x, point.y, point.z );\n\ttarget.premultiply( _matrix );\n\n\treturn target;\n\n}\n","import { forwardRef, useCallback, useContext } from 'react';\nimport { CameraTransition, TilesRendererContext } from '3d-tiles-renderer/r3f';\nimport { useThree } from '@react-three/fiber';\nimport { Matrix4, Quaternion, Raycaster, Vector3, MathUtils } from 'three';\nimport { makeRotateAroundPoint } from './makeRotateAroundPoint.js';\n\nconst raycaster = /* @__PURE__ */ new Raycaster();\nconst downVector = /* @__PURE__ */ new Vector3();\nconst axis = /* @__PURE__ */ new Vector3();\nconst quat = /* @__PURE__ */ new Quaternion();\nconst matrix = /* @__PURE__ */ new Matrix4();\n\nexport const CameraViewTransition = forwardRef( function CameraViewTransition( props, ref ) {\n\n\tconst tiles = useContext( TilesRendererContext );\n\tconst controls = useThree( ( { controls } ) => controls );\n\tconst scene = useThree( ( { scene } ) => scene );\n\n\tconst onBeforeToggleCallback = useCallback( ( manager, targetCamera ) => {\n\n\t\tif ( ! manager.animating ) {\n\n\t\t\ttargetCamera.updateMatrixWorld();\n\n\t\t\t// Force the fixed point to be in the camera center\n\t\t\traycaster.ray.direction.set( 0, 0, - 1 ).transformDirection( manager.camera.matrixWorld );\n\t\t\traycaster.ray.origin.setFromMatrixPosition( manager.camera.matrixWorld );\n\n\t\t\tconst hit = raycaster.intersectObject( scene )[ 0 ];\n\t\t\tif ( hit ) {\n\n\t\t\t\tmanager.fixedPoint.copy( hit.point );\n\t\t\t\tmanager.syncCameras();\n\n\t\t\t} else {\n\n\t\t\t\tcontrols.getPivotPoint( manager.fixedPoint );\n\t\t\t\tmanager.syncCameras();\n\n\t\t\t}\n\n\t\t\t// get the normal at the target point\n\t\t\tif ( tiles ) {\n\n\t\t\t\tmatrix.copy( tiles.group.matrixWorld ).invert();\n\t\t\t\tdownVector.copy( manager.fixedPoint ).applyMatrix4( matrix );\n\t\t\t\ttiles.ellipsoid.getPositionToNormal( downVector, downVector ).multiplyScalar( - 1 ).transformDirection( tiles.group.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tdownVector.set( 0, - 1, 0 );\n\n\t\t\t}\n\n\t\t\tif ( targetCamera.isOrthographicCamera ) {\n\n\t\t\t\t// transition the camera view to the top down while retaining same general pointing direction\n\t\t\t\tconst angle = downVector.angleTo( raycaster.ray.direction );\n\t\t\t\taxis.crossVectors( downVector, raycaster.ray.direction );\n\t\t\t\tquat.setFromAxisAngle( axis, - angle ).normalize();\n\n\t\t\t\tmakeRotateAroundPoint( manager.fixedPoint, quat, matrix );\n\t\t\t\ttargetCamera.matrixWorld.premultiply( matrix );\n\t\t\t\ttargetCamera.matrixWorld.decompose(\n\t\t\t\t\ttargetCamera.position,\n\t\t\t\t\ttargetCamera.quaternion,\n\t\t\t\t\ttargetCamera.scale,\n\t\t\t\t);\n\n\t\t\t\t// TODO: it's possible if the fixed point isn't in the middle of the screen that\n\t\t\t\t// the \"down\" vector isn't well aligned with the ellipsoid normal. Trying to\n\t\t\t\t// find the middle point again after rotation and then adjusting the camera again\n\t\t\t\t// could help this?\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: expose _isNearControls in a better way\n\t\t\t\t// don't tilt the camera if we're outside the \"near controls\" behavior so we\n\t\t\t\t// don't rotate the camera while out in space\n\t\t\t\tif ( ! controls.isGlobeControls || controls._isNearControls() ) {\n\n\t\t\t\t\t// tilt the perspective down slightly\n\t\t\t\t\tlet angle = downVector.angleTo( raycaster.ray.direction );\n\t\t\t\t\tangle = Math.max( 65 * MathUtils.DEG2RAD - angle, 0 );\n\n\t\t\t\t\taxis.set( 1, 0, 0 ).transformDirection( targetCamera.matrixWorld );\n\t\t\t\t\tquat.setFromAxisAngle( axis, angle ).normalize();\n\n\t\t\t\t\tmakeRotateAroundPoint( manager.fixedPoint, quat, matrix );\n\t\t\t\t\ttargetCamera.matrixWorld.premultiply( matrix );\n\t\t\t\t\ttargetCamera.matrixWorld.decompose(\n\t\t\t\t\t\ttargetCamera.position,\n\t\t\t\t\t\ttargetCamera.quaternion,\n\t\t\t\t\t\ttargetCamera.scale,\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tcontrols.adjustCamera( manager.perspectiveCamera );\n\t\tcontrols.adjustCamera( manager.orthographicCamera );\n\n\t}, [ tiles, controls, scene ] );\n\n\treturn <CameraTransition { ...props } ref={ ref } onBeforeToggle={ onBeforeToggleCallback } />;\n\n} );\n"],"names":["_matrix","Matrix4","makeRotateAroundPoint","point","quat","target","raycaster","Raycaster","downVector","Vector3","axis","Quaternion","matrix","CameraViewTransition","forwardRef","props","ref","tiles","useContext","TilesRendererContext","controls","useThree","scene","onBeforeToggleCallback","useCallback","manager","targetCamera","hit","angle","MathUtils","CameraTransition"],"mappings":"mMAGA,MAAMA,EAAU,IAAIC,EACb,SAASC,EAAuBC,EAAOC,EAAMC,EAAS,CAE5D,OAAAA,EAAO,gBAAiB,CAAEF,EAAM,EAAG,CAAEA,EAAM,EAAG,CAAEA,EAAM,CAAG,EAEzDH,EAAQ,2BAA4BI,CAAM,EAC1CC,EAAO,YAAaL,CAAS,EAE7BA,EAAQ,gBAAiBG,EAAM,EAAGA,EAAM,EAAGA,EAAM,CAAG,EACpDE,EAAO,YAAaL,CAAS,EAEtBK,CAER,CCVA,MAAMC,MAAgCC,EAChCC,MAAiCC,EACjCC,MAA2BD,EAC3BL,MAA2BO,EAC3BC,MAA6BX,EAEtBY,EAAuBC,EAAAA,WAAY,SAA+BC,EAAOC,EAAM,CAErF,MAAAC,EAAQC,aAAYC,CAAqB,EACzCC,EAAWC,EAAU,CAAE,CAAE,SAAAD,KAAgBA,CAAS,EAClDE,EAAQD,EAAU,CAAE,CAAE,MAAAC,KAAaA,CAAM,EAEzCC,EAAyBC,EAAAA,YAAa,CAAEC,EAASC,IAAkB,CAEnE,GAAA,CAAED,EAAQ,UAAY,CAE1BC,EAAa,kBAAkB,EAGrBpB,EAAA,IAAI,UAAU,IAAK,EAAG,EAAG,EAAI,EAAE,mBAAoBmB,EAAQ,OAAO,WAAY,EACxFnB,EAAU,IAAI,OAAO,sBAAuBmB,EAAQ,OAAO,WAAY,EAEvE,MAAME,EAAMrB,EAAU,gBAAiBgB,CAAM,EAAG,CAAE,EA0BlD,GAzBKK,GAEIF,EAAA,WAAW,KAAME,EAAI,KAAM,EACnCF,EAAQ,YAAY,IAIXL,EAAA,cAAeK,EAAQ,UAAW,EAC3CA,EAAQ,YAAY,GAKhBR,GAEJL,EAAO,KAAMK,EAAM,MAAM,WAAY,EAAE,OAAO,EAC9CT,EAAW,KAAMiB,EAAQ,UAAW,EAAE,aAAcb,CAAO,EACrDK,EAAA,UAAU,oBAAqBT,EAAYA,CAAW,EAAE,eAAgB,EAAI,EAAE,mBAAoBS,EAAM,MAAM,WAAY,GAIrHT,EAAA,IAAK,EAAG,GAAK,CAAE,EAItBkB,EAAa,qBAAuB,CAGxC,MAAME,EAAQpB,EAAW,QAASF,EAAU,IAAI,SAAU,EAC1DI,EAAK,aAAcF,EAAYF,EAAU,IAAI,SAAU,EACvDF,EAAK,iBAAkBM,EAAM,CAAEkB,CAAM,EAAE,UAAU,EAE1B1B,EAAAuB,EAAQ,WAAYrB,EAAMQ,CAAO,EAC3Cc,EAAA,YAAY,YAAad,CAAO,EAC7Cc,EAAa,YAAY,UACxBA,EAAa,SACbA,EAAa,WACbA,EAAa,KACd,CAAA,SAYK,CAAEN,EAAS,iBAAmBA,EAAS,kBAAoB,CAG/D,IAAIQ,EAAQpB,EAAW,QAASF,EAAU,IAAI,SAAU,EACxDsB,EAAQ,KAAK,IAAK,GAAKC,EAAU,QAAUD,EAAO,CAAE,EAEpDlB,EAAK,IAAK,EAAG,EAAG,CAAE,EAAE,mBAAoBgB,EAAa,WAAY,EACjEtB,EAAK,iBAAkBM,EAAMkB,CAAM,EAAE,UAAU,EAExB1B,EAAAuB,EAAQ,WAAYrB,EAAMQ,CAAO,EAC3Cc,EAAA,YAAY,YAAad,CAAO,EAC7Cc,EAAa,YAAY,UACxBA,EAAa,SACbA,EAAa,WACbA,EAAa,KACd,CAAA,CAIF,CAIQN,EAAA,aAAcK,EAAQ,iBAAkB,EACxCL,EAAA,aAAcK,EAAQ,kBAAmB,CAEhD,EAAA,CAAER,EAAOG,EAAUE,CAAM,CAAE,EAE9B,aAAQQ,EAAmB,CAAA,GAAGf,EAAQ,IAAAC,EAAY,eAAiBO,EAAyB,CAE7F,CAAE"}